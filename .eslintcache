[{"/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/index.js":"1","/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/reportWebVitals.js":"2","/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/aws-exports.js":"3","/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/App.jsx":"4","/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/graphql/queries.js":"5","/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/graphql/mutations.js":"6"},{"size":500,"mtime":1611109883212,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611109883213,"results":"9","hashOfConfig":"8"},{"size":802,"mtime":1611114969474,"results":"10","hashOfConfig":"8"},{"size":6746,"mtime":1611117378281,"results":"11","hashOfConfig":"8"},{"size":682,"mtime":1611111296741,"results":"12","hashOfConfig":"8"},{"size":1036,"mtime":1611111296778,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wdamgk",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/index.js",[],["29","30"],"/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/reportWebVitals.js",[],"/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/aws-exports.js",[],"/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/App.jsx",["31"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Amplify, { API, graphqlOperation, Storage } from 'aws-amplify';\nimport awsconfig from './aws-exports';\nimport { AmplifySignOut, withAuthenticator } from '@aws-amplify/ui-react';\nimport { listSongs } from './graphql/queries';\nimport { updateSong, createSong } from './graphql/mutations';\n\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nimport ReactPlayer from 'react-player';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { Paper, IconButton, TextField } from '@material-ui/core';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport AddIcon from '@material-ui/icons/Add';\nimport PublishIcon from '@material-ui/icons/Publish';\n\nAmplify.configure(awsconfig);\n\nfunction App() {\n    const [songs, setSongs] = useState([]);\n    const [songPlaying, setSongPlaying] = useState('');\n    const [audioURL, setAudioURL] = useState('');\n    const [showAddSong, setShowAddNewSong] = useState(false);\n\n    useEffect(() => {\n        fetchSongs();\n    }, []);\n\n    const toggleSong = async idx => {\n        if (songPlaying === idx) {\n            setSongPlaying('');\n            return;\n        }\n\n        const songFilePath = songs[idx].filePath;\n        try {\n            const fileAccessURL = await Storage.get(songFilePath, { expires: 60 });\n            console.log('access url', fileAccessURL);\n            setSongPlaying(idx);\n            setAudioURL(fileAccessURL);\n            return;\n        } catch (error) {\n            console.error('error accessing the file from s3', error);\n            setAudioURL('');\n            setSongPlaying('');\n        }\n    };\n\n    const fetchSongs = async () => {\n        try {\n            const songData = await API.graphql(graphqlOperation(listSongs));\n            const songList = songData.data.listSongs.items;\n            console.log('song list', songList);\n            setSongs(songList);\n        } catch (error) {\n            console.log('error on fetching songs', error);\n        }\n    };\n\n    const addLike = async idx => {\n        try {\n            const song = songs[idx];\n            song.like = song.like + 1;\n            delete song.createdAt;\n            delete song.updatedAt;\n\n            const songData = await API.graphql(graphqlOperation(updateSong, { input: song }));\n            const songList = [...songs];\n            songList[idx] = songData.data.updateSong;\n            setSongs(songList);\n        } catch (error) {\n            console.log('error on adding Like to song', error);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <AmplifySignOut />\n                <h2>My App Content</h2>\n            </header>\n            <div className=\"songList\">\n                {songs.map((song, idx) => {\n                    return (\n                        <Paper variant=\"outlined\" elevation={2} key={`song${idx}`}>\n                            <div className=\"songCard\">\n                                <IconButton aria-label=\"play\" onClick={() => toggleSong(idx)}>\n                                    {songPlaying === idx ? <PauseIcon /> : <PlayArrowIcon />}\n                                </IconButton>\n                                <div>\n                                    <div className=\"songTitle\">{song.title}</div>\n                                    <div className=\"songOwner\">{song.owner}</div>\n                                </div>\n                                <div>\n                                    <IconButton aria-label=\"like\" onClick={() => addLike(idx)}>\n                                        <FavoriteIcon />\n                                    </IconButton>\n                                    {song.like}\n                                </div>\n                                <div className=\"songDescription\">{song.description}</div>\n                            </div>\n                            {songPlaying === idx ? (\n                                <div className=\"ourAudioPlayer\">\n                                    <ReactPlayer\n                                        url={audioURL}\n                                        controls\n                                        playing\n                                        height=\"50px\"\n                                        onPause={() => toggleSong(idx)}\n                                    />\n                                </div>\n                            ) : null}\n                        </Paper>\n                    );\n                })}\n                {showAddSong ? (\n                    <AddSong\n                        onUpload={() => {\n                            setShowAddNewSong(false);\n                            fetchSongs();\n                        }}\n                    />\n                ) : (\n                    <IconButton onClick={() => setShowAddNewSong(true)}>\n                        <AddIcon />\n                    </IconButton>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default withAuthenticator(App);\n\nconst AddSong = ({ onUpload }) => {\n    const [songData, setSongData] = useState({});\n    const [mp3Data, setMp3Data] = useState();\n\n    const uploadSong = async () => {\n        //Upload the song\n        console.log('songData', songData);\n        const { title, description, owner } = songData;\n\n        const { key } = await Storage.put(`${uuid()}.mp3`, mp3Data, { contentType: 'audio/mp3' });\n\n        const createSongInput = {\n            id: uuid(),\n            title,\n            description,\n            owner,\n            filePath: key,\n            like: 0,\n        };\n        await API.graphql(graphqlOperation(createSong, { input: createSongInput }));\n        onUpload();\n    };\n\n    return (\n        <div className=\"newSong\">\n            <TextField\n                label=\"Title\"\n                value={songData.title}\n                onChange={e => setSongData({ ...songData, title: e.target.value })}\n            />\n            <TextField\n                label=\"Artist\"\n                value={songData.owner}\n                onChange={e => setSongData({ ...songData, owner: e.target.value })}\n            />\n            <TextField\n                label=\"Description\"\n                value={songData.description}\n                onChange={e => setSongData({ ...songData, description: e.target.value })}\n            />\n            <input type=\"file\" accept=\"audio/mp3\" onChange={e => setMp3Data(e.target.files[0])} />\n            <IconButton onClick={uploadSong}>\n                <PublishIcon />\n            </IconButton>\n        </div>\n    );\n};","/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/graphql/queries.js",[],["32","33"],"/Users/felixschildorfer/Documents/Refunds/amplify-react-app/src/graphql/mutations.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":12},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["44"],["45"],"no-global-assign","no-unsafe-negation"]